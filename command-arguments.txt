1:HL["/_next/static/media/7cba1811e3c25a15-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/css/cd219d613ad8989f.css","style",{"crossOrigin":""}]
3:HL["/_next/static/css/57a6561a816568b6.css","style",{"crossOrigin":""}]
0:["WUDZ7Np6zNiTNYU9oSPIa",[[["",{"children":["(blog)",{"children":[["slug","command-arguments","c"],{"children":["__PAGE__?{\"slug\":[\"command-arguments\"]}",{}]}]}]},"$undefined","$undefined",true],"$L4",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cd219d613ad8989f.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/57a6561a816568b6.css","precedence":"next","crossOrigin":""}]],"$L5"]]]]
6:HL["/_next/static/css/c1c99bc127b9f571.css","style",{"crossOrigin":""}]
7:I[4893,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-91558245b01b3e1c.js"],"CSPostHogProvider"]
8:I[7821,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-91558245b01b3e1c.js"],"ThemeProviders"]
9:I[8326,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-faea16132bf38d64.js"],""]
a:I[5235,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-91558245b01b3e1c.js"],""]
b:I[6954,[],""]
c:I[7264,[],""]
4:[null,["$","html",null,{"lang":"en-us","className":"__variable_bc0dcf scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/favicon.svg"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon.svg"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon.svg"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/favicon.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","$L7",null,{"children":["$","body",null,{"className":"m-auto max-w-2xl dark:text-gray-100","children":["$","$L8",null,{"children":[["$","main",null,{"className":"min-h-screen p-6 pt-3 md:pt-6","children":[["$","header",null,{"className":"mb-5 flex items-center md:mb-10","children":[["$","span",null,{"className":"text-md whitespace-nowrap font-bold md:text-lg","children":["$","$L9",null,{"href":"/","className":"-ml-2 rounded-sm p-2 transition-[background-color] hover:bg-gray-200 active:bg-gray-300 dark:hover:bg-[#313131] dark:active:bg-[#242424]","children":"Omar Abid"}]}],["$","nav",null,{"className":"flex grow items-center justify-end gap-1 font-mono text-xs md:gap-3","children":[["$","$La",null,{}],["$","a",null,{"className":"inline-flex rounded-sm p-2 transition-[background-color] hover:bg-gray-200 active:bg-gray-300 dark:hover:bg-[#313131] dark:active:bg-[#242424]","href":"/about","children":"About"}]]}]]}],["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"initialChildNode":["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children",["slug","command-arguments","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$Ld","$Le",null],"childPropSegment":"__PAGE__?{\"slug\":[\"command-arguments\"]}","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c1c99bc127b9f571.css","precedence":"next","crossOrigin":""}]]}],"childPropSegment":["slug","command-arguments","c"],"styles":null}],"childPropSegment":"(blog)","styles":null}]]}],["$","footer",null,{"className":"mt-3 flex p-6 pb-6 pt-3 text-center font-mono text-xs text-gray-500 dark:text-gray-400","children":[["$","div",null,{"className":"grow text-left","children":["Omar Abid (",["$","a",null,{"className":"border-b border-gray-300 text-gray-600 transition-[border-color] hover:border-gray-600 dark:border-gray-500 dark:text-white dark:hover:border-white ","target":"_blank","href":"https://github.com/omarabid","children":"@omarabid"}],")"]}],["$","div",null,{}]]}]]}]}]}]]}],null]
5:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"How command line arguments get parsed | Omar Abid - Personal Blog"}],["$","meta","3",{"name":"description","content":"Explore how command line arguments are parsed."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://omarabid.com/command-arguments"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://omarabid.com/feed.xml"}],["$","meta","8",{"property":"og:title","content":"How command line arguments get parsed"}],["$","meta","9",{"property":"og:description","content":"Explore how command line arguments are parsed."}],["$","meta","10",{"property":"og:url","content":"https://omarabid.com/command-arguments"}],["$","meta","11",{"property":"og:site_name","content":"Omar Abid - Personal Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:type","content":"article"}],["$","meta","14",{"property":"article:published_time","content":"2023-12-23T00:00:00.000Z"}],["$","meta","15",{"property":"article:modified_time","content":"2023-12-23T00:00:00.000Z"}],["$","meta","16",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","17",{"name":"twitter:title","content":"How command line arguments get parsed"}],["$","meta","18",{"name":"twitter:description","content":"Explore how command line arguments are parsed."}],["$","meta","19",{"name":"next-size-adjust"}]]
f:I[1514,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-faea16132bf38d64.js"],""]
10:I[2529,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-faea16132bf38d64.js"],""]
11:I[6598,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-faea16132bf38d64.js"],""]
e:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"How command line arguments get parsed\",\"datePublished\":\"2023-12-23T00:00:00.000Z\",\"dateModified\":\"2023-12-23T00:00:00.000Z\",\"description\":\"Explore how command line arguments are parsed.\",\"url\":\"https://omarabid.com/command-arguments\",\"author\":[{\"@type\":\"Person\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$Lf",null,{}],["$","div",null,{"className":"xl:divide-y xl:divide-gray-200 xl:dark:divide-gray-700","children":[["$","header",null,{"className":"pt-6 xl:pb-6","children":[["$","h1",null,{"className":"text-2xl font-bold mb-1 dark:text-gray-100","children":"How command line arguments get parsed"}],["$","p",null,{"className":"font-mono flex text-xs text-gray-500 dark:text-gray-500","children":[["$","span",null,{"className":"flex-grow","children":[["$","span",null,{"className":"hidden md:inline","children":[["$","span",null,{"children":["$","a",null,{"href":"https://github.com/omarabid","className":"hover:text-gray-800 dark:hover:text-gray-400","target":"_blank","children":"@omarabid"}]}],["$","span",null,{"className":"mx-2","children":"|"}]]}],["$","span",null,{"children":["$","time",null,{"dateTime":"2023-12-23T00:00:00.000Z","children":"Saturday, December 23, 2023"}]}]]}],["$","span",null,{"className":"pr-1.5"}]]}]]}],["$","article",null,{"className":"text-gray-800 dark:text-gray-300 mb-10","children":["$","div",null,{"className":"prose max-w-none pb-8 pt-10 dark:prose-invert","children":[[["$","p",null,{"children":"This blog post assumes you have basic knowledge of Rust."}],["$","p",null,{"children":"Suppose you want to create a Rust program. This program will read the arguments passed and parse them."}],["$","$L10",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":["$","span",null,{"className":"code-line","children":"./myprogram a bunch of arguments\n"}]}]}],["$","p",null,{"children":"This is fairly straightforward. Not only can you read these arguments, but they are also already parsed for you."}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"fn"}]," ",["$","span",null,{"className":"token function function-definition","children":"main"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"let"}]," args",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token class-name","children":"Vec"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token class-name","children":"String"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token namespace","children":["std",["$","span",null,{"className":"token punctuation","children":"::"}],"env",["$","span",null,{"className":"token punctuation","children":"::"}]]}],["$","span",null,{"className":"token function","children":"args"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"collect"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token macro property","children":"dbg!"}],["$","span",null,{"className":"token punctuation","children":"("}],"args",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":"Which gives"}],["$","$L10",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"["}],"src/main.rs:6",["$","span",null,{"className":"token punctuation","children":"]"}]," args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"target/debug/myprogram\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"a\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"bunch\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"of\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"arguments\""}],",\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}]]}]}],["$","p",null,{"children":["Simple, right? What about a ",["$","code",null,{"children":"String"}]," instead?"]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," command ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"myprogram a bunch of arguments\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":["To keep things simple, we can split the ",["$","code",null,{"children":"String"}]," by white spaces."]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," command ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"myprogram a bunch of arguments\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," arguments ",["$","span",null,{"className":"token operator","children":"="}]," command",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"split_whitespace"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"collect"}],["$","span",null,{"className":"token punctuation","children":"::"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token class-name","children":"Vec"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token operator","children":"&"}],["$","span",null,{"className":"token keyword","children":"str"}],["$","span",null,{"className":"token operator","children":">>"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token macro property","children":"dbg!"}],["$","span",null,{"className":"token punctuation","children":"("}],"arguments",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],["$","p",null,{"children":"We get roughly the same output, or at least for the parts (arguments) we care about. This approach works fine until we encounter arguments styled differently."}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," command ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"myprogram commit -m \\\"commit message\\\"\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":"Our little white space splitting operation will yield this:"}],["$","$L10",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"["}],"src/main.rs:10",["$","span",null,{"className":"token punctuation","children":"]"}]," arguments ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"myprogram\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"commit\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"-m\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":["\"",["$","span",null,{"className":"token entity","title":"\\\"","children":"\\\""}],"commit\""]}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":["\"message",["$","span",null,{"className":"token entity","title":"\\\"","children":"\\\""}],"\""]}],",\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}]]}]}],["$","p",null,{"children":"Which doesn't seem to be quite right. This has split our message. Does the Rust parsing mechanism do that? If we run the initial program with the same arguments, we get:"}],["$","$L10",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"["}],"src/main.rs:6",["$","span",null,{"className":"token punctuation","children":"]"}]," args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"target/debug/myprogram\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"commit\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"-m\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"commit message\""}],",\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}]]}]}],["$","p",null,{"children":["This is interesting; it not only failed to split the message but also removed the quotation marks. This suggests arguments are a bit trickier than whitespace. As such, it would be preferrable to find out how Rust is doing it instead of trying to implement it. One way to do this is by reviewing Rust source code. Good news: One can read the source code for Rust ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://doc.rust-lang.org/std/","children":"std library"}],"."]}],["$","h4",null,{"id":"stdenvargs","children":[["$","a",null,{"href":"#stdenvargs","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"std::env::args"]}],["$","p",null,{"children":["The place to start is ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://doc.rust-lang.org/std/env/fn.args.html","children":"std::env::args"}],". The first thing to learn is that there are Operating System differences in how arguments are handled:"]}],["$","blockquote",null,{"children":["$","p",null,{"children":"On Unix systems the shell usually expands unquoted arguments with glob patterns (such as * and ?). On Windows this is not done, and such arguments are passed as-is."}]}],["$","p",null,{"children":"We can then follow the code to find the responsible part:"}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// Step 1: https://doc.rust-lang.org/src/std/env.rs.html#759"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token class-name","children":"Args"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," inner",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token function","children":"args_os"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"   \n"}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// Step 2: https://doc.rust-lang.org/src/std/env.rs.html#794"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token class-name","children":"ArgsOs"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," inner",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token namespace","children":["sys",["$","span",null,{"className":"token punctuation","children":"::"}],"args",["$","span",null,{"className":"token punctuation","children":"::"}]]}],["$","span",null,{"className":"token function","children":"args"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["Finally, we land on the file that matters: ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://doc.rust-lang.org/src/std/sys/unix/args.rs.html","children":"sys::unix::args"}],". There are different implementations for the different targets out there. However, the top of the file commentary does stir us in a different direction."]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//! Global initialization and retrieval of command line arguments."}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//!"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//! On some platforms these are stored during runtime startup,"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//! and on some they are retrieved from the system on demand."}],"\n"]}]]}]}],["$","p",null,{"children":["So the ",["$","em",null,{"children":"parsed"}]," arguments are actually passed from the Operating System itself (or retrieved from it)? The plot thickens..."]}],["$","h4",null,{"id":"the-operating-system","children":[["$","a",null,{"href":"#the-operating-system","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"The Operating System"]}],["$","p",null,{"children":[["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://lwn.net","children":"LWN.net"}]," has a great article on ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://lwn.net/Articles/630727/","children":"how programs are run"}],", under Linux."]}],["$","blockquote",null,{"children":[["$","p",null,{"children":"For Linux versions up to and including 3.18, the only system call that invokes a new program is execve(), which has the following prototype:"}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":["$","span",null,{"className":"code-line","children":["int ",["$","span",null,{"className":"token function","children":"execve"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token keyword","children":"const"}]," ",["$","span",null,{"className":"token keyword","children":"char"}]," ",["$","span",null,{"className":"token operator","children":"*"}],"filename",["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token keyword","children":"char"}]," ",["$","span",null,{"className":"token operator","children":"*"}],["$","span",null,{"className":"token keyword","children":"const"}]," argv",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token keyword","children":"char"}]," ",["$","span",null,{"className":"token operator","children":"*"}],["$","span",null,{"className":"token keyword","children":"const"}]," envp",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":"The filename argument specifies the program to be executed, and the argv and envp arguments are NULL-terminated lists that specify the command line arguments and environment variables for the new program."}]]}],["$","p",null,{"children":["In order to execute a program under linux, you have to make a ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://en.wikipedia.org/wiki/System_call","children":"syscall"}]," with ",["$","code",null,{"children":"execve"}],"; the only problem is: You still have to specify the arguments yourself. This implies linux itself is not involved in the parsing of the arguments."]}],["$","p",null,{"children":"So, who does? The party responsible for executing the program should be the one parsing the arguments. Whoever that party may be. If you are executing the command in the terminal, it should be the shell's responsibility. But does this mean that the shell is parsing the arguments?"}],["$","h4",null,{"id":"the-shell","children":[["$","a",null,{"href":"#the-shell","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"The Shell"]}],["$","p",null,{"children":["The ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://en.wikipedia.org/wiki/Unix_shell","children":"shell"}]," is a program whose main function is to interpret commands. Shells are not ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://en.wikipedia.org/wiki/Terminal_emulator","children":"terminals"}]," and this difference can be lost as frequent use of the terminal can blur these boundaries."]}],["$","p",null,{"children":["This is problematic, however. If different shells apply parsing differently, how can programs account for that. Does ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/clap-rs/clap","children":"Clap"}],", for example, account for that? Or are all shells supposed to behave the same?"]}],["$","p",null,{"children":["Luckily, there is a ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html","children":"POSIX standard"}],". Shells and Operating Systems might not necessarily comply to that, but it is a starting point."]}],["$","p",null,{"children":["The details about parsing are a bit too technical and can be dazzling. I found that this ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://www.irif.fr/_media/rencontres/pps2018/regis-gianas.pdf","children":"slide"}]," can give a good overview. You can also check the code for the ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/gitGNU/gnu_bash/blob/bc007799f0e1362100375bb95d952d28de4c62fb/parse.y","children":"GNU bash parser"}]," if you are curious about a particular implementation."]}],["$","h4",null,{"id":"shlex","children":[["$","a",null,{"href":"#shlex","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"shlex"]}],["$","p",null,{"children":["Lucky for us, there is a crate that can do this parsing: ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/comex/rust-shlex","children":"shlex"}],"."]}],["$","p",null,{"children":"Let's give it a shot!"}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"let"}]," shlex_command ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"myprogram commit -m \\\"commit message\\\"\""}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"let"}]," shlex_arguments ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token namespace","children":["shlex",["$","span",null,{"className":"token punctuation","children":"::"}]]}],["$","span",null,{"className":"token function","children":"split"}],["$","span",null,{"className":"token punctuation","children":"("}],"slex_command",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"unwrap"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token macro property","children":"dbg!"}],["$","span",null,{"className":"token punctuation","children":"("}],"shlex_arguments",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],["$","p",null,{"children":"Bingo!"}],["$","$L10",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"["}],"src/main.rs:14",["$","span",null,{"className":"token punctuation","children":"]"}]," shlex_arguments ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"myprogram\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"commit\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"-m\""}],",\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"commit message\""}],",\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}]]}]}],["$","h4",null,{"id":"stdprocesscommand","children":[["$","a",null,{"href":"#stdprocesscommand","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"std::process::Command"]}],["$","p",null,{"children":["If you have used ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://doc.rust-lang.org/std/process/struct.Command.html","children":"std::process::Command"}]," then you might have wondered, like I did, why you have to parse the arguments before passing them."]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token class-name","children":"Command"}],["$","span",null,{"className":"token punctuation","children":"::"}],["$","span",null,{"className":"token function","children":"new"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"cmd\""}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"args"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"\"/C\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"echo hello\""}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"output"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"expect"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"failed to execute process\""}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}]]}]}],["$","p",null,{"children":[["$","code",null,{"children":"Command"}]," accepts an array of arguments. These have to be parsed. You can't pass these arguments as a single string; otherwise, your command will fail. This is because, behind the scenes, Rust uses ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://doc.rust-lang.org/src/std/sys/unix/process/process_unix.rs.html#412","children":"execve"}]," to run your command; just like the shell. So it expects you to do the parsing of the arguments!"]}]],["$","$L11",null,{}]]}]}]]}]]}]]
d:null
