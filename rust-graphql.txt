1:HL["/_next/static/media/7cba1811e3c25a15-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/css/cd219d613ad8989f.css","style",{"crossOrigin":""}]
3:HL["/_next/static/css/959e61cd6bf7e234.css","style",{"crossOrigin":""}]
0:["Py0GnHVEtbE6txuAghHxJ",[[["",{"children":["(blog)",{"children":[["slug","rust-graphql","c"],{"children":["__PAGE__?{\"slug\":[\"rust-graphql\"]}",{}]}]}]},"$undefined","$undefined",true],"$L4",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cd219d613ad8989f.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/959e61cd6bf7e234.css","precedence":"next","crossOrigin":""}]],"$L5"]]]]
6:HL["/_next/static/css/c1c99bc127b9f571.css","style",{"crossOrigin":""}]
7:I[4893,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-3c45d3b9abe07049.js"],"CSPostHogProvider"]
8:I[7821,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-3c45d3b9abe07049.js"],"ThemeProviders"]
9:I[8326,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-47a78e5a6d2fc851.js"],""]
a:I[5235,["326","static/chunks/326-f0b929b9e51900a5.js","185","static/chunks/app/layout-3c45d3b9abe07049.js"],""]
b:I[6954,[],""]
c:I[7264,[],""]
4:[null,["$","html",null,{"lang":"en-us","className":"__variable_bc0dcf scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/favicon.svg"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon.svg"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon.svg"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/favicon.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","$L7",null,{"children":["$","body",null,{"className":"m-auto max-w-2xl dark:text-gray-100","children":["$","$L8",null,{"children":[["$","main",null,{"className":"min-h-screen p-6 pt-3 md:pt-6","children":[["$","header",null,{"className":"mb-5 flex items-center md:mb-10","children":[["$","span",null,{"className":"text-md whitespace-nowrap font-bold md:text-lg","children":["$","$L9",null,{"href":"/","className":"-ml-2 rounded-sm p-2 transition-[background-color] hover:bg-gray-200 active:bg-gray-300 dark:hover:bg-[#313131] dark:active:bg-[#242424]","children":"Omar Abid"}]}],["$","nav",null,{"className":"flex grow items-center justify-end gap-1 font-mono text-xs md:gap-3","children":[["$","$La",null,{}],["$","a",null,{"className":"inline-flex rounded-sm p-2 transition-[background-color] hover:bg-gray-200 active:bg-gray-300 dark:hover:bg-[#313131] dark:active:bg-[#242424]","href":"/about","children":"About"}]]}]]}],["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"initialChildNode":["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children",["slug","rust-graphql","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$Ld","$Le",null],"childPropSegment":"__PAGE__?{\"slug\":[\"rust-graphql\"]}","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c1c99bc127b9f571.css","precedence":"next","crossOrigin":""}]]}],"childPropSegment":["slug","rust-graphql","c"],"styles":null}],"childPropSegment":"(blog)","styles":null}]]}],["$","footer",null,{"className":"mt-3 flex p-6 pb-6 pt-3 text-center font-mono text-xs text-gray-500 dark:text-gray-400","children":[["$","div",null,{"className":"grow text-left","children":["Omar Abid (",["$","a",null,{"className":"border-b border-gray-300 text-gray-600 transition-[border-color] hover:border-gray-600 dark:border-gray-500 dark:text-white dark:hover:border-white ","target":"_blank","href":"https://github.com/omarabid","children":"@omarabid"}],")"]}],["$","div",null,{}]]}]]}]}]}]]}],null]
5:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Code Generation with GraphQL in Rust | Omar Abid - Personal Blog"}],["$","meta","3",{"name":"description","content":"Using GraphQL to generate custom types."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://omarabid.com/rust-graphql"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://omarabid.com/feed.xml"}],["$","meta","8",{"property":"og:title","content":"Code Generation with GraphQL in Rust"}],["$","meta","9",{"property":"og:description","content":"Using GraphQL to generate custom types."}],["$","meta","10",{"property":"og:url","content":"https://omarabid.com/rust-graphql"}],["$","meta","11",{"property":"og:site_name","content":"Omar Abid - Personal Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:type","content":"article"}],["$","meta","14",{"property":"article:published_time","content":"2024-09-01T00:00:00.000Z"}],["$","meta","15",{"property":"article:modified_time","content":"2024-09-01T00:00:00.000Z"}],["$","meta","16",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","17",{"name":"twitter:title","content":"Code Generation with GraphQL in Rust"}],["$","meta","18",{"name":"twitter:description","content":"Using GraphQL to generate custom types."}],["$","meta","19",{"name":"next-size-adjust"}]]
f:I[1514,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-47a78e5a6d2fc851.js"],""]
10:I[2529,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-47a78e5a6d2fc851.js"],""]
11:I[6598,["326","static/chunks/326-f0b929b9e51900a5.js","202","static/chunks/app/(blog)/%5B...slug%5D/page-47a78e5a6d2fc851.js"],""]
e:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Code Generation with GraphQL in Rust\",\"datePublished\":\"2024-09-01T00:00:00.000Z\",\"dateModified\":\"2024-09-01T00:00:00.000Z\",\"description\":\"Using GraphQL to generate custom types.\",\"url\":\"https://omarabid.com/rust-graphql\",\"author\":[{\"@type\":\"Person\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$Lf",null,{}],["$","div",null,{"className":"xl:divide-y xl:divide-gray-200 xl:dark:divide-gray-700","children":[["$","header",null,{"className":"pt-6 xl:pb-6","children":[["$","h1",null,{"className":"text-2xl font-bold mb-1 dark:text-gray-100","children":"Code Generation with GraphQL in Rust"}],["$","p",null,{"className":"font-mono flex text-xs text-gray-500 dark:text-gray-500","children":[["$","span",null,{"className":"flex-grow","children":[["$","span",null,{"className":"hidden md:inline","children":[["$","span",null,{"children":["$","a",null,{"href":"https://github.com/omarabid","className":"hover:text-gray-800 dark:hover:text-gray-400","target":"_blank","children":"@omarabid"}]}],["$","span",null,{"className":"mx-2","children":"|"}]]}],["$","span",null,{"children":["$","time",null,{"dateTime":"2024-09-01T00:00:00.000Z","children":"Sunday, September 1, 2024"}]}]]}],["$","span",null,{"className":"pr-1.5"}]]}]]}],["$","article",null,{"className":"text-gray-800 dark:text-gray-300 mb-10","children":["$","div",null,{"className":"prose max-w-none pb-8 pt-10 dark:prose-invert","children":[[["$","p",null,{"children":["I happen to be working on an application that uses the Github API. Now, that might be straightforward, but my stack of choice isn't. Github has several ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://docs.github.com/en/rest/using-the-rest-api/libraries-for-the-rest-api?apiVersion=2022-11-28","children":"SDK libraries"}]," and three of them are official. For Rust, there are ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://docs.github.com/en/rest/using-the-rest-api/libraries-for-the-rest-api?apiVersion=2022-11-28#rust","children":"two libraries"}]," though only one is maintained."]}],["$","p",null,{"children":["Problem is, my environment is a bit constrained. I am using Cloudflare Workers, and the compilation target for Rust is ",["$","code",null,{"children":"wasm32-unknown-unknown"}],". You can't use regular Tokio networking; mainly because networking doesn't exist in this sandbox. Instead, web requests are made through the ",["$","code",null,{"children":"fetch"}]," API. Yes, the Web Browser ",["$","code",null,{"children":"fetch"}]," API, called from your ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/cloudflare/workers-rs/blob/ca61ce5dd00fae5d11305c5db4c8acac7fc87639/worker/src/request.rs#L17","children":"WASM binary"}],"."]}],["$","h3",null,{"id":"create-your-own","children":[["$","a",null,{"href":"#create-your-own","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"Create your own?"]}],["$","p",null,{"children":["Since ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/XAMPPRocky/octocrab","children":"Octocrab"}],", the only viable Github API library for Rust doesn't compile to ",["$","code",null,{"children":"wasm32-unknown-unknown"}],", and making it play nice with ",["$","code",null,{"children":"fetch"}]," is an ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/XAMPPRocky/octocrab/pull/591#discussion_r1514162091","children":"exercise in frustration"}],", maybe one should create a new library?"]}],["$","p",null,{"children":["Except the Github API is ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/XAMPPRocky/octocrab/tree/main/src/api","children":"humongous"}],": The challenge is not technical, but rather the sheer amount of endpoints and data structure that have to be implemented. Also, these implementations still have to be kept up-to-date."]}],["$","h3",null,{"id":"why-a-library-anyway","children":[["$","a",null,{"href":"#why-a-library-anyway","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"Why a Library anyway?"]}],["$","p",null,{"children":"There are two main reasons why I prefer to use libraries rather than call the API directly:"}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":"Navigation: I don't want to be reading REST documentation and figuring out the inputs/outputs for every endpoint. Give me a type and I'll figure it out from there."}]}],["$","li",null,{"children":["$","p",null,{"children":"Strong Typing: If the returned value is an integer, I want the variable to be typed in Rust as an integer as well."}]}]]}],["$","p",null,{"children":["These two points kind of converge. Essentially I want to be able to do something like ",["$","code",null,{"children":"response.repository.stargazers_count"}]," and be sure it's an integer, and the correct one."]}],["$","h3",null,{"id":"graphql-to-the-rescue","children":[["$","a",null,{"href":"#graphql-to-the-rescue","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"GraphQL to the Rescue?"]}],["$","p",null,{"children":["Can GraphQL solve this conundrum? Github has a ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://docs.github.com/en/graphql/overview/explorer","children":"GraphQL Endpoint"}],". Queries, Mutations and the different types can be explored there. Here is the query signature for ",["$","code",null,{"children":"repository"}],":"]}],["$","$L10",null,{"className":"language-graphql","children":["$","code",null,{"className":"code-highlight language-graphql","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token attr-name","children":"repository"}],["$","span",null,{"className":"token punctuation","children":"("}],"\n"]}],["$","span",null,{"className":"code-line","children":["\t",["$","span",null,{"className":"token attr-name","children":"owner"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"String"}],["$","span",null,{"className":"token operator","children":"!"}],"\n"]}],["$","span",null,{"className":"code-line","children":["\t",["$","span",null,{"className":"token attr-name","children":"name"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"String"}],["$","span",null,{"className":"token operator","children":"!"}],"\n"]}],["$","span",null,{"className":"code-line","children":["\t",["$","span",null,{"className":"token attr-name","children":"followRenames"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"Boolean"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token boolean","children":"true"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token class-name","children":"Repository"}],"\n"]}]]}]}],["$","p",null,{"children":"And there we have it, the two of my concerns addressed. Question is, how do we convert these into Rust types?"}],["$","h3",null,{"id":"using-a-graphql-client","children":[["$","a",null,{"href":"#using-a-graphql-client","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],"Using a GraphQL Client"]}],["$","p",null,{"children":["There are few GraphQL clients for Rust, and only one is eligible: ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/graphql-rust/graphql-client","children":"GraphQL-Client"}],". It's from the same guys who made ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/graphql-rust/juniper","children":"Juniper"}],", a GraphQL server."]}],["$","h4",null,{"id":"the-schema","children":[["$","a",null,{"href":"#the-schema","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],["$","em",null,{"children":"The Schema"}]]}],["$","p",null,{"children":["First, we need to get the ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://graphql.org/learn/schema/","children":"schema"}],". It defines both the types and the queries/mutations. This is best done through ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://graphql.org/learn/introspection/https://graphql.org/learn/introspection","children":"introspection"}],". For simplicity, we'll pick the GraphQL schema directly from ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://docs.github.com/public/fpt/schema.docs.graphql","children":"Github"}],"."]}],["$","h4",null,{"id":"the-query","children":[["$","a",null,{"href":"#the-query","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],["$","em",null,{"children":"The Query"}]]}],["$","p",null,{"children":"I am a bit ambivalent about whether this part is better or worse than using a library. For every particular request, you need to define your query. Both with the input and output for such a query. While this gives you more control and clarity about each request, it is less flexible when it comes to code."}],["$","$L10",null,{"className":"language-graphql","children":["$","code",null,{"className":"code-highlight language-graphql","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"query"}]," ",["$","span",null,{"className":"token function definition-query","children":"RepoView"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token variable","children":"$$owner"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"String"}],["$","span",null,{"className":"token operator","children":"!"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token variable","children":"$$name"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token scalar","children":"String"}],["$","span",null,{"className":"token operator","children":"!"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token property-query","children":"repository"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token attr-name","children":"owner"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token variable","children":"$$owner"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token attr-name","children":"name"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token variable","children":"$$name"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property","children":"homepageUrl"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token object","children":"stargazers"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"totalCount"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property-query","children":"issues"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token attr-name","children":"first"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token number","children":"20"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token attr-name","children":"states"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token constant","children":"OPEN"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token object","children":"nodes"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"title"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token object","children":"comments"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["          ",["$","span",null,{"className":"token property","children":"totalCount"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property-query","children":"pullRequests"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token attr-name","children":"first"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token number","children":"20"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token attr-name","children":"states"}],["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token constant","children":"OPEN"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token object","children":"nodes"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"title"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token object","children":"commits"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["          ",["$","span",null,{"className":"token property","children":"totalCount"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","h4",null,{"id":"code-generation","children":[["$","a",null,{"href":"#code-generation","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"icon icon-link"}]}],["$","em",null,{"children":"Code Generation"}]]}],["$","p",null,{"children":["And here comes the ",["$","em",null,{"children":"magic"}]," of Rust derived macros. We only need to define an empty ",["$","code",null,{"children":"struct"}]," and ask ",["$","code",null,{"children":"graphql-client"}]," to generate the corresponding types for it."]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token attr-name attribute","children":"#[derive(GraphQLQuery)]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["$","span",null,{"className":"token attr-name attribute","children":"#[graphql(\n"}]}],["$","span",null,{"className":"code-line","children":["$","span",null,{"className":"token attr-name attribute","children":["    schema_path = ",["$","span",null,{"className":"token string","children":"\"assets/schema.graphql\""}],",\n"]}]}],["$","span",null,{"className":"code-line","children":["$","span",null,{"className":"token attr-name attribute","children":["    query_path = ",["$","span",null,{"className":"token string","children":"\"assets/query.graphql\""}],",\n"]}]}],["$","span",null,{"className":"code-line","children":["$","span",null,{"className":"token attr-name attribute","children":["    response_derives = ",["$","span",null,{"className":"token string","children":"\"Debug\""}],"\n"]}]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token attr-name attribute","children":")]"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"struct"}]," ",["$","span",null,{"className":"token class-name type-definition","children":"RepoView"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],["$","p",null,{"children":"Then, an instance of RepoView will encode the return type of the query."}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," total_count",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token keyword","children":"i64"}]," ",["$","span",null,{"className":"token operator","children":"="}]," repo_view",["$","span",null,{"className":"token punctuation","children":"."}],"stargazers",["$","span",null,{"className":"token punctuation","children":"."}],"total_count",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":["The generated types can be retrieved using ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/dtolnay/cargo-expand","children":"cargo-expand"}],". This is the work we would have had to do manually. Here is an excerpt from the expanded code."]}],["$","$L10",null,{"className":"language-rust","children":["$","code",null,{"className":"language-rust code-highlight","children":[["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"pub"}]," ",["$","span",null,{"className":"token keyword","children":"struct"}]," ",["$","span",null,{"className":"token class-name type-definition","children":"RepoViewRepositoryPullRequests"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token keyword","children":"pub"}]," nodes",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token class-name","children":"Option"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token class-name","children":"Vec"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token class-name","children":"Option"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token class-name","children":"RepoViewRepositoryPullRequestsNodes"}],["$","span",null,{"className":"token operator","children":">>"}],["$","span",null,{"className":"token operator","children":">"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token attr-name attribute","children":"#[doc(hidden)]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token attr-name attribute","children":"#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"const"}]," _",["$","span",null,{"className":"token punctuation","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token attr-name attribute","children":"#[allow(unused_extern_crates, clippy::useless_attribute)]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token keyword","children":"extern"}]," ",["$","span",null,{"className":"token keyword","children":"crate"}]," ",["$","span",null,{"className":"token module-declaration namespace","children":"serde"}]," ",["$","span",null,{"className":"token keyword","children":"as"}]," _serde",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token attr-name attribute","children":"#[automatically_derived]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token keyword","children":"impl"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token lifetime-annotation symbol","children":"'de"}],["$","span",null,{"className":"token operator","children":">"}]," _serde",["$","span",null,{"className":"token punctuation","children":"::"}],["$","span",null,{"className":"token class-name","children":"Deserialize"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token lifetime-annotation symbol","children":"'de"}],["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token keyword","children":"for"}]," ",["$","span",null,{"className":"token class-name","children":"RepoViewRepositoryPullRequests"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["            ",["$","span",null,{"className":"token keyword","children":"fn"}]," ",["$","span",null,{"className":"token function function-definition","children":"deserialize"}],["$","span",null,{"className":"token operator","children":"<"}],["$","span",null,{"className":"token constant","children":"__D"}],["$","span",null,{"className":"token operator","children":">"}],["$","span",null,{"className":"token punctuation","children":"("}],"\n"]}]]}]}],["$","p",null,{"children":"Yes, it's this simple. If you need to convince someone to use GraphQL to expose their API, feel free to refer them to this article."}]],["$","$L11",null,{}]]}]}]]}]]}]]
d:null
